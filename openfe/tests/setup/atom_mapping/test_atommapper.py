import pytest

from openfe.setup.atom_mapping.ligandatommapper import LigandAtomMapper


class TestAtomMapper:
    def test_abstract_error(self, simple_mapping):
        # suggest_mappings should fail with NotImplementedError if the user
        # tries to directly user the abstract class
        molA = simple_mapping.componentA
        molB = simple_mapping.componentB
        with pytest.raises(TypeError):
            mapper = LigandAtomMapper()
            list(mapper.suggest_mappings(molA, molB))

    def test_concrete_mapper(self, simple_mapping, other_mapping):
        # a correctly implemented concrete atom mapping should return the
        # mappings generated by the _mappings_generator
        molA = simple_mapping.componentA
        molB = simple_mapping.componentB

        class ConcreteLigandAtomMapper(LigandAtomMapper):
            def __init__(self, mappings):
                self.mappings = mappings

            def _mappings_generator(self, componentA, componentB):
                for mapping in self.mappings:
                    yield mapping.componentA_to_componentB

        mapper = ConcreteLigandAtomMapper([simple_mapping, other_mapping])
        results = list(mapper.suggest_mappings(molA, molB))
        assert len(results) == 2
        assert results == [simple_mapping, other_mapping]
